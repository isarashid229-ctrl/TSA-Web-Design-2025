
const dirRoot=document.getElementById('directory-root');
const cardTpl=document.getElementById('resource-card');
const filters=document.getElementById('filters');
const resultsCount=document.getElementById('results-count');
const resetBtn=document.getElementById('reset-filters');
const activeFiltersEl=document.getElementById('active-filters');
const azEl=document.getElementById('az');
let DATA=[]; let typingTimer;
(async function init(){try{const res=await fetch('data/resources.json?ts='+Date.now()); if(!res.ok) throw new Error('HTTP '+res.status); const json=await res.json(); if(!Array.isArray(json)) throw new Error('resources.json must be an array'); DATA=json; buildAZ(); render();}catch(e){console.error(e); dirRoot.innerHTML='<article class="card"><h3>Could not load resources</h3><p>Check data/resources.json.</p></article>'; resultsCount.textContent='0 results';}})();
function buildAZ(){const letters=['All'].concat('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')); azEl.innerHTML=letters.map(l=>`<a href="#" data-initial="${l==='All'?'':l}">${l}</a>`).join(''); azEl.addEventListener('click',(e)=>{const a=e.target.closest('a'); if(!a) return; e.preventDefault(); filters.querySelector('[name="initial"]')?.remove(); const i=document.createElement('input'); i.type='hidden'; i.name='initial'; i.value=a.dataset.initial||''; filters.appendChild(i); azEl.querySelectorAll('a').forEach(x=>x.classList.toggle('active',x===a)); render();});}
function getFilters(){const fd=new FormData(filters); return{ q:(fd.get('q')||'').toLowerCase().trim(), category:fd.get('category')||'', cost:fd.get('cost')||'', accessibility:fd.get('accessibility')||'', city:fd.get('city')||'', initial:(fd.get('initial')||'').toUpperCase(), sort:fd.get('sort')||'name-asc' };}
function showActivePills(f){const pills=[]; const esc=s=>String(s).replace(/[&<>"]/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m])); if(f.q)pills.push(`<span class="link-list"><span>Search: ${esc(f.q)}</span></span>`); if(f.category)pills.push(`<span class="link-list"><span>Category: ${esc(f.category)}</span></span>`); if(f.city)pills.push(`<span class="link-list"><span>Region: ${esc(f.city)}</span></span>`); if(f.cost)pills.push(`<span class="link-list"><span>Cost: ${esc(f.cost)}</span></span>`); if(f.accessibility)pills.push(`<span class="link-list"><span>Access: ${esc(f.accessibility)}</span></span>`); if(f.initial)pills.push(`<span class="link-list"><span>A–Z: ${esc(f.initial)}</span></span>`); activeFiltersEl.innerHTML=pills.join(' ');}
function applyFilters(items,f){let out=items.filter(r=>{const name=(r.name||''); const desc=(r.description||''); const tags=(r.tags||[]).join(' '); const rCity=(r.city||''); const k=f.q?(name.toLowerCase().includes(f.q)||desc.toLowerCase().includes(f.q)||tags.toLowerCase().includes(f.q)):true; const c=f.category? r.category===f.category:true; const cost=f.cost? r.cost===f.cost:true; const a=f.accessibility? (r.accessibility||[]).includes(f.accessibility):true; const city=f.city? rCity===f.city:true; const letter=f.initial? (name[0]||'').toUpperCase()===f.initial:true; return k&&c&&cost&&a&&city&&letter;}); switch(f.sort){case 'name-desc': out.sort((a,b)=>b.name.localeCompare(a.name)); break; case 'updated-desc': out.sort((a,b)=> new Date(b.updated)-new Date(a.updated)); break; default: out.sort((a,b)=>a.name.localeCompare(b.name)); } return out; }
function render(){const f=getFilters(); showActivePills(f); const items=applyFilters(DATA,f); dirRoot.innerHTML=''; resultsCount.textContent=`${items.length} result${items.length!==1?'s':''}`; if(items.length===0){dirRoot.innerHTML='<article class="card"><h3>No results</h3><p>Try clearing filters.</p></article>'; return;} for(const r of items){const node=cardTpl.content.cloneNode(true); const name=r.name||'Untitled'; const h3=node.querySelector('h3'); if(r.url&&r.url.startsWith('http')){h3.innerHTML=`<a href="${r.url}" class="card-link" target="_blank" rel="noopener noreferrer nofollow">${name}</a>`;} else {h3.textContent=name;} const bits=[]; if(r.city)bits.push(r.city); if(r.category)bits.push(r.category); if(r.cost)bits.push(r.cost); if(r.updated){const d=new Date(r.updated); if(!isNaN(d)) bits.push('updated '+d.toLocaleDateString());} node.querySelector('.card-meta').textContent=bits.join(' • '); node.querySelector('.card-desc').textContent=r.description||''; node.querySelector('.card-tags').textContent=(r.tags||[]).map(t=>`#${t}`).join(' '); const visit=node.querySelector('.btn'); if(r.url&&r.url.startsWith('http')){visit.href=r.url;} else {visit.style.display='none';} dirRoot.appendChild(node);} }
filters?.addEventListener('input',(ev)=>{clearTimeout(typingTimer); if(ev.target.tagName==='SELECT') return render(); typingTimer=setTimeout(render,160);});
resetBtn?.addEventListener('click',()=>{filters.reset(); render();});
